name: DOTNET-STANDARD BUILDS
on:
  push:
  pull_request:
  workflow_dispatch:
env:
  CLIENT_FOLDER: 'cybersource-rest-client-dotnetstandard'
  SAMPLE_FOLDER: 'cybersource-rest-samples-csharp'
jobs:
    workflow-job:
        defaults:
          run:
            shell: bash
        strategy:
          fail-fast: false
          matrix:
            operating-system: [windows-latest,windows-2019,ubuntu-latest,ubuntu-20.04,macos-latest,macos-13]
            dotnet-ver: ['3.1.x','5.0','6.0','7.0','8.0']
            exclude:
              - operating-system: macos-latest  #macos 14 arm64 image is being used and it doesn't support .NET Core 3.1
                dotnet-ver: '3.1.x'
              - operating-system: macos-latest  #macos 14 arm64 image is being used and it doesn't support .NET 5.0 
                dotnet-ver: '5.0'
        runs-on: ${{matrix.operating-system}}
        env:
          NET_VER: ${{matrix.dotnet-ver}}
        steps:
            - name: Setup Git Config for windows to allow path lengths greater than 260 characters
              if: runner.os == 'Windows'
              run: |
                git config --global core.longpaths true
            - name: Checkout the cybersource-rest-client-dotnetstandard repo
              uses: actions/checkout@v4
              with:
                path: ${{env.CLIENT_FOLDER}}
            - name: Checkout cybersource-rest-samples-csharp repo
              uses: actions/checkout@v4
              with:
                repository: 'CyberSource/cybersource-rest-samples-csharp'
                ref: 'master'
                path: ${{env.SAMPLE_FOLDER}}
            - name: SetUp DotNet
              id: setdotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: ${{matrix.dotnet-ver}}
            - name: Changing the csproj files to reference the locally built Authorization and Client dll file
              run: |
                if [[ (${{matrix.dotnet-ver}} == '3.1.x' && "$(uname -s)" == "Darwin") ||
                (${{matrix.dotnet-ver}} == '5.0' && "$(uname -s)" == "Darwin") ]]; then
                  echo "Microsoft .NET SDK version ${{matrix.dotnet-ver}} has issues for Mac OS, latest Microsoft .NET SDK will be used for building the projects."
                else
                  dotnet new globaljson --sdk-version ${{steps.setdotnet.outputs.dotnet-version}}
                  cat global.json
                fi
                sed -i -e 's|<PackageReference Include="CyberSource\.Authentication\.NetStandard" Version=".*" \/>|<Reference Include="CyberSource.Authentication.NetStandard">\n  <HintPath>../../cybersource-rest-auth-netstandard/AuthenticationSdk/AuthenticationSdk/bin/Release/netstandard2.1/Cybersource.Authentication.NetStandard.dll</HintPath>\n  <Private>true</Private>\n</Reference>|g' cybersource-rest-client-dotnetstandard/cybersource-rest-client-netstandard/cybersource-rest-client-netstandard/cybersource-rest-client-netstandard.csproj
                sed -i -e 's|<PackageReference Include="CyberSource\.Authentication\.NetStandard" Version=".*" />|<Reference Include="CyberSource.Authentication.NetStandard">\n  <HintPath>../cybersource-rest-client-dotnetstandard/cybersource-rest-auth-netstandard/AuthenticationSdk/AuthenticationSdk/bin/Release/netstandard2.1/Cybersource.Authentication.NetStandard.dll</HintPath>\n  <Private>true</Private>\n</Reference>|g' cybersource-rest-samples-csharp/cybersource-rest-samples-netcore.csproj
                sed -i -e 's|<PackageReference Include="CyberSource\.Rest\.Client\.NetStandard" Version=".*" />|<Reference Include="CyberSource.Rest.Client.NetStandard">\n  <HintPath>../cybersource-rest-client-dotnetstandard/cybersource-rest-client-netstandard/cybersource-rest-client-netstandard/bin/Release/netstandard2.1/cybersource-rest-client-netstandard.dll</HintPath>\n  <Private>true</Private>\n</Reference>|g' cybersource-rest-samples-csharp/cybersource-rest-samples-netcore.csproj
                cat cybersource-rest-client-dotnetstandard/cybersource-rest-client-netstandard/cybersource-rest-client-netstandard/cybersource-rest-client-netstandard.csproj
            - name: Build the Authentication and Client projects
              run: |
                dotnet --version
                dotnet build $CLIENT_FOLDER/cybersource-rest-auth-netstandard/AuthenticationSdk/AuthenticationSdk/AuthenticationSdk.csproj -c release
                dotnet build $CLIENT_FOLDER/cybersource-rest-client-netstandard/cybersource-rest-client-netstandard/cybersource-rest-client-netstandard.csproj -c release
            - name: Build the Samples project and Run Tests
              env:
                TARGET_FR: netcoreapp3.1
              run: |
                if [ $NET_VER != '3.1.x' ]; then
                  export TARGET_FR=net${NET_VER}
                  sed -i -e "s|<TargetFramework>.*</TargetFramework>|<TargetFramework>${TARGET_FR}</TargetFramework>|g" cybersource-rest-samples-csharp/cybersource-rest-samples-netcore.csproj
                fi
                cat cybersource-rest-samples-csharp/cybersource-rest-samples-netcore.csproj
                #changing the target framework for samples application
                dotnet --version
                echo "Target Framework : ${TARGET_FR}"
                dotnet build $SAMPLE_FOLDER/cybersource-rest-samples-netcore.csproj -c release
                cd $SAMPLE_FOLDER/bin/Release/$TARGET_FR
                echo "Running Samples"
                ./SampleCodeNetCore -RunAll > output.log
                cp output.log ../../../
            - name: Using Report Generation Action
              id: report-generation
              uses: ./cybersource-rest-client-dotnetstandard/.github/actions/generate-report
              with:
                lang: dotnetstandard
                sample-folder-name: ${{env.SAMPLE_FOLDER}}
                log-file-name: output.log
            - name: Upload Test Reports
              uses: actions/upload-artifact@v4
              with:
                name: sample-run-report-${{matrix.operating-system}}-dotnet-core-ver-${{matrix.dotnet-ver}}
                path: |
                  ${{env.SAMPLE_FOLDER}}/${{steps.report-generation.outputs.result-pdf-name}}
